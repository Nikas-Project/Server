name: Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  IMAGE_NAME: nikasproject/server
  GITHUB_IMAGE_NAME: docker.pkg.github.com/nikas-project/server/server

jobs:
  Python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        node-version: ["12", "14"]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "setup.py"

      - name: Setup NodeJS ${{ matrix.node-version }} on ${{ matrix.os }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: package.json

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils libsqlite0 libxml2-utils sqlite openssl ca-certificates tini
          python -m pip install --upgrade pip
          pip install setuptools flake8 pytest pytest-cov wheel twine nose-py3 gunicorn cffi flask
          touch .env.pypi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Compile JS stuff
        run: |
          npm install
          make init sass js

      - name: Setup development
        run: |
          pip install -e .
          nikas --version

      - name: Run test suite
        run: |
          make test
        env:
          PYTHONHASHSEED: random

  Docker:
    needs: Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version
        run: |
          echo "NIKAS_VERSION=$(cat version.env)" >> $GITHUB_ENV

      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.NIKAS_VERSION }} -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.GITHUB_IMAGE_NAME }}:${{ env.NIKAS_VERSION }} --build-arg DATE_CREATED=${{ steps.date.outputs.date }} --build-arg VERSION=${{ env.NIKAS_VERSION }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push to Dockerhub
        run: |
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
          docker push ${{ env.IMAGE_NAME }}:${{ env.NIKAS_VERSION }}

      - name: Push to Github
        run: |
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.GITHUB_TOKEN }}" docker.pkg.github.com
          docker push ${{ env.GITHUB_IMAGE_NAME }}:${{ env.NIKAS_VERSION }}
