image: docker:19

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml

variables:
  DOCKER_DRIVER: overlay

stages:
  - Test
  - Deploy package
  - Build image
  - Push to registries

services:
  - docker:dind

test:
  stage: Test
  script:
    - apk update
    - apk upgrade
    - apk add -t build-dependencies python3-dev libffi-dev build-base
    - apk add python3 py3-pip sqlite openssl openssl-dev ca-certificates su-exec tini
    - pip3 install nose wheel
    - python3 setup.py install
    - python3 setup.py nosetests --with-xunit
  artifacts:
    reports:
      junit: nosetests.xml

deploy:pypi-test:
  stage: Deploy package
  image: python:latest
  script:
    - pip install twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${PYPI_TEST_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

deploy:gitlab:
  stage: Deploy package
  image: python:latest
  only:
    - master
  script:
    - pip install twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci python -m twine upload --repository-url https://gitlab.example.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*

deploy:pypi:
  stage: Deploy package
  image: python:latest
  only:
    - master
  script:
    - pip install twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*

build image:
  stage: Build image
  script:
    - version=$(cat version.env)
    - echo $version
    - docker build -t nikasproject/server:stable -t docker.pkg.github.com/nikas-project/server/server:latest -t $CI_REGISTRY/nikas-project/server:latest .
    - mkdir image
    - docker save nikasproject/server:stable > image/dockerhub.tar
    - docker save docker.pkg.github.com/nikas-project/server/server:latest > image/github.tar
    - docker save $CI_REGISTRY/nikas-project/server:latest > image/gitlab.tar
  artifacts:
    expire_in: 15 mins
    paths:
      - image

push to dockerhub:
  stage: Push to registries
  only:
    - master
  script:
    - docker load -i image/dockerhub.tar
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    - docker push nikasproject/server:stable

push to github:
  stage: Push to registries
  only:
    - master
  script:
    - docker load -i image/github.tar
    - docker login -u "$DOCKERHUB_USERNAME" -p "$GITHUB_TOKEN" docker.pkg.github.com
    - docker push docker.pkg.github.com/nikas-project/server/server:latest

push to gitlab:
  stage: Push to registries
  only:
    - master
  script:
    - docker load -i image/gitlab.tar
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY/nikas-project/server:latest

dependency_scanning:
  stage: .pre
  variables:
    DS_REMEDIATE: "false"
    DS_PYTHON_VERSION: 3
    PIP_REQUIREMENTS_FILE: "requirements.txt"
  artifacts:
    expire_in: 1 week
    reports:
      dependency_scanning: gl-dependency-scanning-report.json

license_scanning:
  stage: .pre
  variables:
    CI_DEBUG_TRACE: "true"
    LM_PYTHON_VERSION: 3
    ASDF_PYTHON_VERSION: 3
    PIP_REQUIREMENTS_FILE: "requirements.txt"
  artifacts:
    expire_in: 1 week
    reports:
      license_scanning: gl-license-scanning-report.json
